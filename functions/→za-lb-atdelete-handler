# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
#
# Original work Copyright (c) 2019-2020 Sebastian Gniazdowski
# Modified work Copyright (c) 2020-2021 Nicholas Serrano
# Copyright (c) 2022 Z-Shell Community
#
# License MIT

→za-lb-atdelete-handler() {
  # https://z.digitalclouds.dev/community/zsh_plugin_standard#standard-recommended-options
  builtin emulate -L zsh ${=${options[xtrace]:#off}:+-o xtrace}
  builtin setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd

  if [[ "$1" = plugin ]]; then
    local type="$1" user="$2" plugin="$3" id_as="$4" dir="${5#%}" hook="$6"
  else
    local type="$1" url="$2" id_as="$3" dir="${4#%}" hook="$5"
  fi

  #
  # lbin'' ice – creation of links
  #

  if (( ${+ICE[lbin]} )); then
    (( ${+ICE[sbin]} )) && {
      (( !OPTS[opt_-q,--quiet] )) && \
      +zi-message "{annex}linkbin-annex{ehi}:{rst} {ice}sbin{warn} ice detected, not doing anything...{rst}"
      return;
    }
    local -a lbins srcdst
    lbins=( ${(s.;.)ICE2[lbin]} )
    local lbin sym="-P"
    (
      # CD for the globbing through eval
      builtin cd -q "$dir" || return
      for lbin ( $lbins "" ) {
        [[ ${lbin[1]} = "!" ]] && sym="-s"
        if [[ -z $lbin && ${#lbins} -eq 0 ]] || [[ $lbin = "!" && ${#lbins} -eq 1 ]]; then
          local -a files
          integer i=0
          while [[ ! -f $files[1] && $i -lt 9 ]]; do
            ((i++))
            case $i in
              1)
                files=( $dir/${id_as:t}(Nnon.) )
              ;;
              2)
                [[ -n $plugin ]] && files=( $dir/$plugin(Nnon.) )
              ;;
              3)
                [[ -n $url ]] && files=( $dir/${url:t}(Nnon.) )
              ;;
              4)
                files=( $dir/*(*Nnon.:t) )
              ;;
              5)
                files=( $dir/**/${id_as:t} )
              ;;
              6)
                [[ -n $plugin ]] && files=( $dir/**/$plugin(Nnon.) )
              ;;
              7)
                [[ -n $url ]] && files=( $dir/**/${url:t}(Nnon.) )
              ;;
              8)
                files=( $dir/**/*(*Nnon.:t) )
              ;;
              9)
                +zi-message "{pre}linkbin annex: {error}The automatic-empty {ice}lbin{error} ice didn't find any executable files{rst}"
              ;;
            esac
          done
          [[ $i -gt 8 ]] && break
          lbin=$files[1]
        else
          lbin=${lbin#!}
          [[ -z $lbin ]] && continue
        fi
        srcdst=( ${(@s.->.)lbin} )
        srcdst=( "${srcdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )
        # Substitute the standard keywords and param''-s
        @zi-substitute 'srcdst[1]' 'srcdst[2]'
        local -a fnames
        local fname
        eval "fnames=( ${srcdst[1]}(Nnon.) )"
        if (( !${#fnames} )) {
          +zi-message "{annex}linkbin-annex{ehi}:{rst} {error}The {ice}lbin{error} ice (\`{glob}$lbin{error}')didn't match any files{rst}"
          continue
        }
        for fname ( $fnames ) {
          srcdst[1]="$fname"
          local fnam="${srcdst[2]:-${srcdst[1]:t}}"
          local file="$ZPFX/bin/$fnam"
          if [[ -f $file ]] {
            command rm "$file"
            if ! [[ -f $file ]]; then
              (( !OPTS[opt_-q,--quiet] )) && \
              +zi-message "{annex}linkbin-annex{ehi}:{rst} {msg}Removed {pname}$fnam{msg} ${${${sym#-P}:+soft}:-hard}{msg} link{rst}"
            else
              +zi-message "{annex}linkbin-annex{ehi}:{rst} {error}Something went wrong deleting the {pname}$fnam{error} link{rst}"
            fi
          } else {
            +zi-message "{annex}linkbin-annex{ehi}:{rst} {error}The {pname}$fnam{msg} ${${${sym#-P}:+soft}:-hard}{error} link didn't exist in \$ZPFX/bin (or isn't a regular file){rst}"
          }
        }
      }
    )
  fi
}
